// Scala
dependencies {
  implementation libs.scala.library

  zinc libs.zinc

  compileOnly     libs.slf4j
  testRuntimeOnly libs.logback

  testImplementation libs.scalatest
  // for scalatest reports
  testImplementation libs.flexmark.core
  testImplementation libs.flexmark.profile.pegdown

  testImplementation libs.scalacheck
  testImplementation libs.discipline.scalatest
  testImplementation libs.algebraLaws
}

// with switch to ZIO2.0 (?) the tests started hanging if run in parallel...
// TODO this is not the end of the story; am I going to run into ZIO's
// blocking thread-pool size in production?!
test {
  maxParallelForks = 1
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.with {
    targetCompatibility = '' // TODO remove when https://youtrack.jetbrains.com/issue/SCL-18813 is fixed
    additionalParameters = [
      '-new-syntax',
      '-feature',
      '-language:strictEquality',
      //'-source:future', /// TODO!!!
      //'-deprecation',
      //'-unchecked',
      //'-Xsemanticdb',
      //'-Ysafe-init',
      //'-explain',
    ]
  }
}

// library: all projects are configured as a library (except for the docs one)
if (project.name != 'docs') {
  final String gitHubRepository = "opentorah/opentorah"
  final String gitHubRepositoryUrl = "https://github.com/$gitHubRepository"
  final String orgName = 'Open Torah Project'
  final String orgUrl = 'http://www.opentorah.org'

  jar {
    // From https://github.com/GoogleContainerTools/jib/tree/master/examples/multi-module
    //   Since this library is included as a jar in our jib projects, we want the jar to built reproducibly.
    preserveFileTimestamps false
    reproducibleFileOrder true

    // Because why not?
    manifest {
      attributes(
        'Implementation-Title': project.description,
        'Implementation-Version': project.version
      )
    }
  }

  task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
  }

  task scaladocJar(type: Jar) {
    from scaladoc.destinationDir
    archiveClassifier.set('scaladoc')
  }
  scaladocJar.dependsOn(scaladoc)

  // there is no Java in the project, but Maven Central requires javadoc JAR...
  task javadocJar(type: Jar) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
  }
  javadocJar.dependsOn(javadoc)

  publishing {
    repositories {
      maven {
        name = 'mavenCentral'
        url = version.endsWith('SNAPSHOT') ?
          'https://oss.sonatype.org/content/repositories/snapshots' :
          'https://oss.sonatype.org/service/local/staging/deploy/maven2'

        // Note: this will use mavenCentralUsername and mavenCentralPassword properties - if they are available
        credentials(PasswordCredentials)
      }

      publications {
        library(MavenPublication) {
          from components.java
          artifact sourcesJar
          // TODO something is still not quite right with the ScalaDoc support for Scala 3 in Gradle; disabling for now
          //artifact scaladocJar
          artifact javadocJar

          pom {
            name = project.name
            description = project.description
            url = "$gitHubRepositoryUrl/tree/master/$project.name"
            scm {
              url = "$gitHubRepositoryUrl"
              connection = "scm:git:git://github.com/${gitHubRepository}.git"
              developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
            }
            licenses {
              license {
                name = 'The Apache Software License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution = 'repo'
                comments = 'A business-friendly OSS license'
              }
            }
            organization {
              name = orgName
              url = orgUrl
            }
            developers {
              developer {
                id = 'dub'
                name = 'Leonid Dubinsky'
                email = 'dub@opentorah.org'
                organization = orgName
                organizationUrl = orgUrl
                timezone = '-5'
              }
            }
          }
        }
      }
    }
  }

  signing {
    useInMemoryPgpKeys(findProperty('gnupg.dub-opentorah-org.key'), findProperty('gnupg.dub-opentorah-org.password'))
    sign publishing.publications.library
  }

  task uploadLibrary {
    group = 'publishing'
    description = 'Upload artifacts'
  }
  uploadLibrary.dependsOn(publishLibraryPublicationToMavenCentralRepository)

  task upload {
    description = 'Upload artifacts and plugins'
    group = 'publishing'
  }
  upload.dependsOn(uploadLibrary)
}
