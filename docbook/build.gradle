plugins {
  id 'scala'
  id 'signing'
  id 'com.gradle.plugin-publish'
  // Gradle Plugin Portal Publishing Plugin applies Gradle Plugin Plugin,
  // which adds dependencies to configurations,
  // ScalaJS plugin forces resolution of configurations,
  // after which dependencies can no longer be added,
  // and thus must be applied later.
  id 'org.podval.tools.scalajs'
}

description = 'Gradle DocBook Plugin'

apply from: '../configure.gradle'

dependencies {
  implementation project(':opentorah-core')
  implementation project(':opentorah-util')

  implementation libs.bundles.xmlresolver
  implementation libs.saxon6
  implementation libs.saxon11
  implementation libs.bundles.fop

//  implementation libs.graalvm.sdk

  // TODO still?
  // added by the 'java-gradle-plugin': testImplementation gradleTestKit()
  // it has its own slf4j implementation, so we exclude the default one
  // that is added by the scala.gradle to avoid the warning
  // "Class path contains multiple SLF4J bindings."
  configurations.testRuntimeOnly {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
  }
}

// run tests sequentially
test {
  maxParallelForks = 1
}

gradlePlugin {
  website = 'https://github.com/opentorah/opentorah/tree/master/docbook'
  vcsUrl  = 'https://github.com/opentorah/opentorah/tree/master/docbook' //.git' ?
  plugins {
    docBook {
      id = 'org.opentorah.docbook'
      implementationClass = 'org.opentorah.docbook.plugin.DocBookPlugin'
      displayName = project.description
      description = project.description
      tags.set(['Scala', 'DocBook', 'Html', 'Epub', 'Pdf', 'FOP', 'MathML', 'MathJax'])
    }
  }
}

//upload.dependsOn(publishPlugins)
