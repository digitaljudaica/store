plugins {
  id 'java-library'
  id 'scala'
  id 'com.github.maiflai.scalatest'
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'signing'
  id 'com.gradle.plugin-publish'
}

description = 'Gradle DocBook Plugin'

apply from: '../configure.gradle'

dependencies {
  implementation project(':opentorah-core')

  implementation libs.bundles.xmlresolver
  implementation libs.saxon6
  implementation libs.saxon10
  implementation libs.bundles.fop

  // JEuclid
  implementation libs.fop.jeuclid

  // J2V8 integration
  // Note: Native library (if needed and available) is loaded from a dynamically retrieved artifact,
  // not from this one - but it needs to be compatible with the Java JNI wrappers, so I probably
  // have to use the same version on all platforms.
  // Since 4.6.0 doesn't work on Linux, and 4.8.0 doesn't work with mathjax-node,
  // this probably won't work on any other platform :(
  //
  // For reasons that are not clear to me, if I declare this dependency as compileOnly (as I think it should be),
  // tests fail...
  implementation libs.j2v8

  // Needed to compile classes using Gradle, but does not become a dependency:
  compileOnly gradleApi()

  // TODO still?
  // added by the 'java-gradle-plugin': testImplementation gradleTestKit()
  // it has its own slf4j implementation, so we exclude the default one
  // that is added by the scala.gradle to avoid the warning
  // "Class path contains multiple SLF4J bindings."
  configurations.testRuntimeOnly {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
  }
}

// run tests sequentially
test {
  maxParallelForks = 1
}

gradlePlugin {
  plugins {
    docBook {
      id = 'org.opentorah.docbook'
      implementationClass = 'org.opentorah.docbook.plugin.DocBookPlugin'
    }
  }
}

pluginBundle {
  website = 'https://github.com/opentorah/opentorah/tree/master/docbook'
  vcsUrl  = 'https://github.com/opentorah/opentorah/tree/master/docbook' //.git' ?

  plugins {
    docBook {
      displayName = project.description
      description = project.description
      tags        = ['Scala', 'DocBook', 'Html', 'Epub', 'Pdf', 'FOP', 'MathML', 'MathJax', 'JEuclid']
    }
  }

  // If you have an existing plugin deployed to Bintray and would like to keep
  // your existing group ID and artifact ID for continuity, you can specify
  // them here (needs manual approval on first publication).
  mavenCoordinates {
    groupId    = 'org.opentorah'
    artifactId = 'opentorah-docbook'
  }
}

upload.dependsOn(publishPlugins)
