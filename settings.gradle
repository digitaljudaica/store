pluginManagement {
  repositories {
    mavenCentral()
    gradlePluginPortal()
  }

  plugins {
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.maiflai.scalatest'  version '0.32'
    id 'com.google.cloud.tools.jib'    version '3.2.1'
    id 'org.podval.tools.cloudrun'     version '0.3.1'
    id 'com.gradle.plugin-publish'     version '0.20.0'
    id 'io.miret.etienne.sass'         version '1.3.0'
    id 'org.opentorah.docbook'         version docBookPluginVersion
  }
}

final String scalaVersion      = '3.1.3'
final String scalaVersionMajor = '3'

final String zioVersion        = '2.0.0-RC6'
final String zhttpVersion      = '2.0.0-RC9'
final String zioPreludeVersion = '1.0.0-RC13'

final String flexmarkVersion   = '0.64.0'
final String batikVersion      = '1.14'

dependencyResolutionManagement {
  repositories {
    mavenCentral()
    maven {
      url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
  }

  // Yes, I know about 'libs.versions.toml', but:
  // - I do not want to use yet another configuration language;
  // - it doesn't allow me to interpolate 'scalaVersionMajor';
  // - this way both plugin and dependency versions are in the same file.
  versionCatalogs {libs {
    // Scala
    library('scala-library', "org.scala-lang:scala3-library_3:$scalaVersion")
    library('scala-xml'    , "org.scala-lang.modules:scala-xml_$scalaVersionMajor:2.1.0")
    library('zinc'         , 'org.scala-sbt:zinc_2.13:1.7.0-M2')

    // GraalVM
    library('graalvm-sdk'  , 'org.graalvm:graal-sdk:22.0.0.2')

    // XML
    library('xmlresolver'  , 'org.xmlresolver:xmlresolver:4.3.0')
    library('jing'         , 'org.relaxng:jing:20181222')  // TODO 20220510
    bundle('xmlresolver', ['xmlresolver', 'jing'])
    library('xerces'       , 'xerces:xercesImpl:2.12.2')
    library('saxon11'      , 'net.sf.saxon:Saxon-HE:11.3')
    library('saxon6'       , 'saxon:saxon:6.5.2') // Note: 6.5.3 is the latest, but - no sources for debugging...
    // tagsoup     = "1.2.1" TODO use org.jsoup?

    // Google Cloud
    library('google.cloud.storage', 'com.google.cloud:google-cloud-storage:2.8.1')

    // TODO drop support for JEuclid
    library('fop-jeuclid'  , 'de.rototor.jeuclid:jeuclid-fop:3.1.14')

    // TODO drop support for J2V8
    library('j2v8'         , 'com.eclipsesource.j2v8:j2v8_linux_x86_64:4.8.0')

    // ZIO
    library('zio-core'     , "dev.zio:zio_$scalaVersionMajor:$zioVersion")
    library('zio-streams'  , "dev.zio:zio-streams_$scalaVersionMajor:$zioVersion")
    library('zio-test'     , "dev.zio:zio-test_$scalaVersionMajor:$zioVersion")
    library('zio-prelude'  , "dev.zio:zio-prelude_$scalaVersionMajor:$zioPreludeVersion")
    library('zhttp'        , "io.d11:zhttp_$scalaVersionMajor:$zhttpVersion")

    // Algebra
    library('cats-core'    , "org.typelevel:cats-core_$scalaVersionMajor:2.7.0")
    library('cats-laws'    , "org.typelevel:cats-laws_$scalaVersionMajor:2.7.0")
    library('algebraLaws'  , "org.typelevel:algebra-laws_$scalaVersionMajor:2.7.0")
    library('discipline-scalatest', "org.typelevel:discipline-scalatest_$scalaVersionMajor:2.1.5")

    // Paiges
    library('paiges'       , "org.typelevel:paiges-core_$scalaVersionMajor:0.4.2")

    // Caching
    // I didn't find [ScalaCache](https://cb372.github.io/scalacache/) documentation,
    // and since I am not at the point of using anything other than Caffeine,
    // I'll use it directly - albeit not Scala-idiomatically ;)
    library('caffeine'     , 'com.github.ben-manes.caffeine:caffeine:3.1.1')

    // FOP
    library('fop-core'        , 'org.apache.xmlgraphics:fop:2.7')
    library('fop-hyph'        , 'net.sf.offo:fop-hyph:2.0') // Hyphenation patterns
    library('batik-transcoder', "org.apache.xmlgraphics:batik-transcoder:$batikVersion")
    library('batik-extension' , "org.apache.xmlgraphics:batik-extension:$batikVersion")
    //final String jaiVersion = '1.1.3'
    // TODO split runtime-only out of it
    bundle('fop', ['fop-core', 'fop-hyph', 'batik-transcoder', 'batik-extension'])

    // PDF Generation
    library('playwright', 'com.microsoft.playwright:playwright:1.22.0')

    // Logging
    library('slf4j'   , 'org.slf4j:slf4j-api:1.7.36')
    library('logback' , 'ch.qos.logback:logback-classic:1.2.11')
    library('logstash', 'net.logstash.logback:logstash-logback-encoder:7.2')

    // Flexmark
    library('flexmark-core'           , "com.vladsch.flexmark:flexmark:$flexmarkVersion")
    library('flexmark-profile-pegdown', "com.vladsch.flexmark:flexmark-profile-pegdown:$flexmarkVersion")
    library('flexmark-ext-toc'        , "com.vladsch.flexmark:flexmark-ext-toc:$flexmarkVersion")
    bundle('markdown', ['flexmark-core', 'flexmark-ext-toc'])

    // Zmanim
    library('zmanim', 'com.kosherjava:zmanim:2.3.0')

    // Testing
    library('podvalRun' , 'org.podval.tools:org.podval.tools.run:0.1.4')
    library('scalatest' , "org.scalatest:scalatest_$scalaVersionMajor:3.2.12")
    library('scalacheck', "org.scalacheck:scalacheck_$scalaVersionMajor:1.16.0")

    // Documentation
    library('mdoc', "org.scalameta:mdoc_$scalaVersionMajor:2.3.2")
  }}
}

rootProject.name = 'opentorah'

include ':util'
project(':util'     ).name = 'opentorah-util'

include ':core'
project(':core'     ).name = 'opentorah-core'

include ':texts'
project(':texts'    ).name = 'opentorah-texts'

include ':collector'
project(':collector').name = 'opentorah-collector'

include ':docbook'
project(':docbook'  ).name = 'opentorah-docbook'

include ':docs'

//includeBuild '../../Projects/cloud-run'
