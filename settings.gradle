pluginManagement {
  repositories {
    mavenCentral()
    gradlePluginPortal()
  }

  plugins {
    id 'com.github.ben-manes.versions' version '0.44.0'
    id 'com.github.maiflai.scalatest'  version '0.32'
    id 'org.podval.tools.scalajs'      version '0.4.3'
    id 'com.google.cloud.tools.jib'    version '3.3.1'
    id 'org.podval.tools.cloudrun'     version '0.3.1'
    id 'com.gradle.plugin-publish'     version '1.1.0'
    id 'org.asciidoctor.jvm.convert'   version '3.3.2'
    id 'org.asciidoctor.jvm.gems'      version '3.3.2'
    id 'org.asciidoctor.jvm.pdf'       version '3.3.2'
  }

//includeBuild '../../Projects/cloud-run'
//includeBuild '../../Projects/scalajs/scalajs-gradle'
}

final String scalaVersion      = '3.2.2'
final String scalaVersionMajor = '3'

final String zioVersion        = '2.0.8'
final String flexmarkVersion   = '0.64.0'
final String batikVersion      = '1.16'
final String catsVersion       = '2.9.0'

dependencyResolutionManagement {
  repositories {
    mavenCentral()
//    maven {
//      url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
//    }
  }

  // Yes, I know about 'libs.versions.toml', but:
  // - I do not want to use yet another configuration language;
  // - it doesn't allow me to interpolate 'scalaVersionMajor';
  // - this way both plugin and dependency versions are in the same file.
  versionCatalogs {libs {
    // Scala
    library('scala-library', "org.scala-lang:scala3-library_3:$scalaVersion")
    library('scala-xml'    , "org.scala-lang.modules:scala-xml_$scalaVersionMajor:2.1.0")
    library('zinc'         , 'org.scala-sbt:zinc_2.13:1.8.0')

    // XML
    library('xmlresolver'  , 'org.xmlresolver:xmlresolver:5.0.0')
    library('jing'         , 'org.relaxng:jing:20220510')
    bundle('xmlresolver', ['xmlresolver', 'jing'])
    library('xerces'       , 'xerces:xercesImpl:2.12.2')
    library('saxon11'      , 'net.sf.saxon:Saxon-HE:12.0')
    library('saxon6'       , 'saxon:saxon:6.5.3')
    // tagsoup     = "1.2.1" TODO use org.jsoup?

    // Google Cloud
    library('google.cloud.storage', 'com.google.cloud:google-cloud-storage:2.18.0')

    // ZIO
    library('zio-core'     , "dev.zio:zio_$scalaVersionMajor:$zioVersion")
    library('zio-streams'  , "dev.zio:zio-streams_$scalaVersionMajor:$zioVersion")
    library('zio-test'     , "dev.zio:zio-test_$scalaVersionMajor:$zioVersion")
    library('zio-http'     , "dev.zio:zio-http_$scalaVersionMajor:0.0.3") // TODO 0.0.4

    // Algebra
    library('cats-core'    , "org.typelevel:cats-core_$scalaVersionMajor:$catsVersion")
    library('cats-laws'    , "org.typelevel:cats-laws_$scalaVersionMajor:$catsVersion")
    library('algebraLaws'  , "org.typelevel:algebra-laws_$scalaVersionMajor:$catsVersion")
    library('discipline-scalatest', "org.typelevel:discipline-scalatest_$scalaVersionMajor:2.2.0")

    // Paiges
    library('paiges'       , "org.typelevel:paiges-core_$scalaVersionMajor:0.4.2")

    // Caching
    // I didn't find [ScalaCache](https://cb372.github.io/scalacache/) documentation,
    // and since I am not at the point of using anything other than Caffeine,
    // I'll use it directly - albeit not Scala-idiomatically ;)
    library('caffeine'     , 'com.github.ben-manes.caffeine:caffeine:3.1.3')

    // FOP
    library('fop-core'        , 'org.apache.xmlgraphics:fop:2.8')
    library('fop-hyph'        , 'net.sf.offo:fop-hyph:2.0') // Hyphenation patterns
    library('batik-transcoder', "org.apache.xmlgraphics:batik-transcoder:$batikVersion")
    library('batik-extension' , "org.apache.xmlgraphics:batik-extension:$batikVersion")
    // TODO split runtime-only out of it
    bundle('fop', ['fop-core', 'fop-hyph', 'batik-transcoder', 'batik-extension'])

    // Logging
    library('slf4j'   , 'org.slf4j:slf4j-api:2.0.6')
    library('logback' , 'ch.qos.logback:logback-classic:1.4.5')
    library('logstash', 'net.logstash.logback:logstash-logback-encoder:7.2')

    // Flexmark
    library('flexmark-core'           , "com.vladsch.flexmark:flexmark:$flexmarkVersion")
    library('flexmark-profile-pegdown', "com.vladsch.flexmark:flexmark-profile-pegdown:$flexmarkVersion")
    library('flexmark-ext-toc'        , "com.vladsch.flexmark:flexmark-ext-toc:$flexmarkVersion")
    bundle('markdown', ['flexmark-core', 'flexmark-ext-toc'])

    // Zmanim
    library('zmanim', 'com.kosherjava:zmanim:2.4.0')

    // Testing
    library('scalatest' , "org.scalatest:scalatest_$scalaVersionMajor:3.2.15")
    library('scalacheck', "org.scalacheck:scalacheck_$scalaVersionMajor:1.17.0")

    // Documentation
    //library('mdoc', "org.scalameta:mdoc_$scalaVersionMajor:2.3.7")
  }}
}

rootProject.name = 'opentorah'

include ':util'
project(':util'     ).name = 'opentorah-util'

include ':core'
project(':core'     ).name = 'opentorah-core'

include ':texts'
project(':texts'    ).name = 'opentorah-texts'

include ':collector'
project(':collector').name = 'opentorah-collector'

include ':docbook'
project(':docbook'  ).name = 'opentorah-docbook'

include ':docs'
