plugins {
  id 'scala'
}

description = 'OpenTorah Documentation'

apply from: '../configure.gradle'

repositories {
  mavenCentral()
}

dependencies {
  implementation project(':opentorah-util')
  implementation project(':opentorah-core')
  implementation libs.logback
}

final File tablesDir = file("$buildDir/docs/tables")
tasks.register('generateTables', JavaExec) {
  group = 'documentation'
  outputs.dir(tablesDir)
  mainClass.set('org.opentorah.calendar.paper.Tables')
  args = [tablesDir]
  classpath = sourceSets.main.runtimeClasspath
}

final File asciidocSourceDir = file("$projectDir/src/docs/asciidoc/")
final File asciidocOutputDir = file("$buildDir/docs/asciidoc")
final File paperDir = file("$projectDir/paper")

final List<String> asciidoctorArgs = [
  "--source-dir=$asciidocSourceDir",
  '--verbose',
  '--trace',
  "--require=asciidoctor-bibtex",
  "--attribute=tablesdir=$tablesDir",
  "--attribute=reproducible=true",
  "--attribute=linkcss=true",
  "--attribute=multipage-disable-css=true",
  "--attribute=copycss=$asciidocSourceDir/styles.css",
  "--attribute=stylesdir=.",
  "--attribute=stylesheet=styles.css",
  "--attribute=docinfo=shared",
  "--attribute=docinfodir=$asciidocSourceDir",
  "--attribute=author=Leonid Dubinsky",
  "--attribute=email=dub@opentorah.org",
  "--attribute=toclevels=1",
  "--attribute=multipage-level=1",
  "--attribute=sectlinks=true",
  "--attribute=sectanchors=true",
  "--attribute=hide-uri-scheme=true",
//    'bibliography-database': "$asciidocSourceDir/bibliography.bib",
//    'bibliography-style': 'apa',
  "--attribute=bibtex-file=$asciidocSourceDir/bibliography.bib",
  "--attribute=bibtex-order=alphabetical",
  "--attribute=bibtex-throw=true",
  "--attribute=bibtex-style=apa",
////    'bibtex-style': 'university-of-york-ieee'
////    'bibtex-style': 'chicago-author-date'
////    'bibtex-style': 'din-1505-2-alphanumeric',

  // Note: only when both the `--source-dir` is specified *and* there is a glob in the input files
  // does Asciidoctor preserve the directory structure: https://github.com/asciidoctor/asciidoctor/issues/1394
  "**/calendar/calendar.adoc",
  "**/typesetting/typesetting.adoc",
  "**/dream/dream.adoc"
]

ext.asciidoctorRun = { additionalArguments ->
  exec {
    executable = "asciidoctor"
    args = additionalArguments + asciidoctorArgs
  }
}

tasks.register('asciidoctorExternal') {
  group = 'documentation'

  dependsOn(generateTables)

  outputs.dir(asciidocOutputDir)
  inputs.dir(asciidocSourceDir)

  doLast {
    // Note: there seems to be no analogue for the Asciidoctor Gradle plugin's
    // `separateOutputDirs` (https://asciidoctor.github.io/asciidoctor-gradle-plugin/development-3.x/user-guide/),
    // so I am running Asciidoctor separately for each backend with appropriate `--destination-dir`.
    asciidoctorRun([
      "--destination-dir=$asciidocOutputDir/multipage_html5",
      "--require=asciidoctor-multipage",
      "--backend=multipage_html5"
    ])
    asciidoctorRun([
      "--destination-dir=$asciidocOutputDir/html5",
      "--backend=html5"
    ])
//    asciidoctorRun([
//      "--destination-dir=$asciidocOutputDir/pdf",
//      "--require=asciidoctor-pdf",
//      "--backend=pdf"
//    ])

    project.copy {
      into paperDir

      from "$asciidocSourceDir/styles.css"
      from "$asciidocOutputDir/multipage_html5"
      from "$asciidocOutputDir/html5/calendar/calendar.html"
      from "$asciidocOutputDir/html5/dream/dream.html"
      from "$asciidocOutputDir/html5/typesetting/typesetting.html"
      from "$asciidocOutputDir/pdf/calendar/calendar.pdf"
      from "$asciidocOutputDir/pdf/dream/dream.pdf"
      from "$asciidocOutputDir/pdf/typesetting/typesetting.pdf"
    }
  }
}

tasks.register('site') {
  description = 'Generate project website'
  group = 'documentation'
  dependsOn(asciidoctorExternal /*, mdoc*/)
}

tasks.named('build') {
  dependsOn(site)
}

final String httpPort = '8080'
tasks.register('serveSite', Exec) {
  group = 'documentation'
  dependsOn(site)
  doFirst {
    logger.lifecycle("Serving " + projectDir + " on port " + httpPort)
  }
  workingDir projectDir
  commandLine 'python', '-m', 'http.server', httpPort
}

//library('mdoc', "org.scalameta:mdoc_$scalaVersionMajor:2.3.7")
//final File mdocOutputDir = file("$buildDir/docs/mdoc")
//// TODO: using register() here breaks Gradle...
//task mdoc(type: JavaExec) {
//  mainClass = 'mdoc.Main'
//  args = [
//    '--in', "$projectDir/src/docs/mdoc",
//    '--out', mdocOutputDir,
//    '--classpath', sourceSets.main.runtimeClasspath.asPath
//  ]
//  classpath = sourceSets.main.runtimeClasspath
//}