plugins {
  id 'java-library'
  id 'scala'
  id 'org.asciidoctor.jvm.convert'
  id 'org.asciidoctor.jvm.gems'
}

description = 'OpenTorah Documentation'

apply from: '../configure.gradle'

repositories {
  mavenCentral()
  ruby.gems()
}

dependencies {
  implementation project(':opentorah-util')
  implementation project(':opentorah-core')
  implementation libs.logback

  asciidoctorGems 'rubygems:asciidoctor-multipage:0.0.16'
}

final File tablesDir = file("$buildDir/docs/tables")
tasks.register('generateTables', JavaExec) {
  group = 'publishing'

  mainClass.set('org.opentorah.calendar.paper.Tables')
  args = [tablesDir]
  classpath = sourceSets.main.runtimeClasspath
}

final File asciidocSourceDir = file("$projectDir/src/docs/asciidoc/")
final File asciidocOutputDir = file("$buildDir/docs/asciidoc")
asciidoctor {
  dependsOn(generateTables, asciidoctorGemsPrepare)

  sourceDir asciidocSourceDir
  inputs.dir(asciidocSourceDir)

  sources {
    include 'calendar/calendar.adoc'
    include 'typesetting/typesetting.adoc'
    include 'dream/dream.adoc'
  }

  outputOptions {
    backends = [
//      'pdf',
      'html5',
      'multipage_html5',
    ]
  }

  outputDir asciidocOutputDir

  doFirst {
    project.delete(asciidocOutputDir)
  }
  doLast {
    project.sync {
      from asciidocOutputDir
      into "$projectDir/paper"
    }
  }

  attributes = [
    tablesdir: tablesDir,
    docinfo: 'shared',
    docinfodir: "$asciidocSourceDir/docinfo",
    // partnums: true,
    // sectnums: true,
    sectlinks: true,
    sectanchors: true,
    "hide-uri-scheme": true
  ]

  asciidoctorj {  // asciidoctorjs for AsciiDoctor.js
    requires 'asciidoctor-multipage'
    modules.pdf.version '2.3.4'
  // TODO bibliography: https://github.com/riboseinc/asciidoctor-bibliography
  // TODO bibliography: https://github.com/asciidoctor/asciidoctor-bibtex
  }
}

//final File mdocOutputDir = file("$buildDir/docs/mdoc")
//// TODO: using register() here breaks Gradle...
//task mdoc(type: JavaExec) {
//  group = 'publishing'
//  description = 'Process and publish mdoc documentation'
//
//  dependsOn(classes)
//
//  mainClass = 'mdoc.Main'
//  args = [
//    '--in', "$projectDir/src/docs/mdoc",
//    '--out', mdocOutputDir,
//    '--classpath', sourceSets.main.runtimeClasspath.asPath
//  ]
//  classpath = sourceSets.main.runtimeClasspath
//
//  doFirst {
//    project.delete(mdocOutputDir)
//  }
//  doLast {
//    project.sync {
//      from mdocOutputDir
//      into "$projectDir/docs"
//    }
//  }
//}

tasks.register('site') {
  description = 'Generate project website'
  group = 'publishing'

  dependsOn(asciidoctor /*, mdoc*/)
}

final String httpPort = '8080'
tasks.register('serveSite', Exec) {
  group = 'publishing'

  dependsOn(site)

  doFirst {
    logger.lifecycle("Serving " + projectDir + " on port " + httpPort)
  }
  workingDir projectDir
  commandLine 'python', '-m', 'http.server', httpPort
}
