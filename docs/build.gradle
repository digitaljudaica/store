plugins {
  id 'io.miret.etienne.sass'
  id 'java-library'
  id 'scala'
  id 'org.opentorah.docbook'
}

description = 'OpenTorah Documentation'

apply from: '../configure.gradle'

dependencies {
  implementation project(':opentorah-util')
  implementation project(':opentorah-core')

  implementation libs.caffeine

  implementation libs.logback
  implementation libs.logstash

  implementation libs.bundles.xmlresolver
  implementation libs.saxon6
  implementation libs.saxon11
  implementation libs.bundles.fop

  implementation libs.zio.http

  runtimeOnly libs.mdoc
}

sass {
  version = '1.57.1'
}
compileSass {
  group = 'publishing'

  sourceDir = project.file("$projectDir/sass")
  outputDir = project.file("$projectDir/css")
}

docBook {
  globalSubstitutions = [
    "project.version": project.version
  ]
}

final String mdocOutputDirectory = "$buildDir/docs/mdoc"
// TODO: using register() here breaks Gradle...
task mdoc(type: JavaExec) {
  group = 'publishing'
  description = 'Process and publish mdoc documentation'

  mainClass = 'mdoc.Main'
  args = [
    '--in', "$projectDir/src/main/mdoc",
    '--out', mdocOutputDirectory,
    '--classpath', sourceSets.main.runtimeClasspath.asPath
  ]
  classpath = sourceSets.main.runtimeClasspath
}
mdoc.dependsOn(classes)
mdoc.doFirst {
  // clean
  project.delete(mdocOutputDirectory)
}
mdoc.doLast {
  // publish
  project.sync {
    from mdocOutputDirectory
    into "$projectDir/docs"
  }
}

processDocBook.doLast {
  project.sync {
    from processDocBook.outputDirectory
    into "$projectDir/paper"
  }
}

tasks.register('buildAndPrettyPrintSite', JavaExec) {
  group = 'publishing'

  mainClass = 'org.opentorah.site.SiteServiceCommon'
  args = ['buildAndPrettyPrintSite', projectDir]
  classpath = sourceSets.main.runtimeClasspath
}
buildAndPrettyPrintSite.dependsOn(compileSass)
buildAndPrettyPrintSite.doLast {
  project.sync {
    from processDocBook.outputDirectory
    into "$projectDir/paper"
  }
}

tasks.register('site') {
  description = 'Generate project website'
  group = 'publishing'
}
//site.dependsOn(processDocBook)
site.dependsOn(buildAndPrettyPrintSite)
//buildAndPrettyPrintSite.mustRunAfter(processDocBook)
site.dependsOn(mdoc)

tasks.register('serveSite', JavaExec) {
  group = 'publishing'

  mainClass = 'org.opentorah.site.SiteServiceCommon'
  args = ['serveSite', "file://$projectDir/"]
  classpath = sourceSets.main.runtimeClasspath
}
